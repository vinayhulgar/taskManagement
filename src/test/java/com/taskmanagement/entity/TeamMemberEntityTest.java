package com.taskmanagement.entity;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

class TeamMemberEntityTest {
    
    private TeamMember teamMember;
    private Team team;
    private User user;
    private User inviter;
    
    @BeforeEach
    void setUp() {
        user = new User();
        user.setId(UUID.randomUUID());
        user.setEmail("member@example.com");
        user.setFirstName("Team");
        user.setLastName("Member");
        user.setRole(Role.MEMBER);
        
        inviter = new User();
        inviter.setId(UUID.randomUUID());
        inviter.setEmail("owner@example.com");
        inviter.setFirstName("Team");
        inviter.setLastName("Owner");
        inviter.setRole(Role.MANAGER);
        
        team = new Team();
        team.setId(UUID.randomUUID());
        team.setName("Test Team");
        team.setDescription("Test Description");
        team.setOwner(inviter);
        
        teamMember = new TeamMember();
        teamMember.setId(UUID.randomUUID());
        teamMember.setTeam(team);
        teamMember.setUser(user);
        teamMember.setInvitedBy(inviter);
        teamMember.setJoinedAt(LocalDateTime.now());
    }
    
    @Test
    void constructor_WithParameters_SetsFieldsCorrectly() {
        // Act
        TeamMember newMember = new TeamMember(team, user, inviter);
        
        // Assert
        assertEquals(team, newMember.getTeam());
        assertEquals(user, newMember.getUser());
        assertEquals(inviter, newMember.getInvitedBy());
        assertNull(newMember.getId()); // ID is generated by JPA
        assertNull(newMember.getJoinedAt()); // Set by @CreationTimestamp
    }
    
    @Test
    void defaultConstructor_CreatesEmptyObject() {
        // Act
        TeamMember newMember = new TeamMember();
        
        // Assert
        assertNull(newMember.getId());
        assertNull(newMember.getTeam());
        assertNull(newMember.getUser());
        assertNull(newMember.getInvitedBy());
        assertNull(newMember.getJoinedAt());
    }
    
    @Test
    void settersAndGetters_WorkCorrectly() {
        // Arrange
        UUID newId = UUID.randomUUID();
        LocalDateTime joinedAt = LocalDateTime.now();
        
        // Act
        teamMember.setId(newId);
        teamMember.setJoinedAt(joinedAt);
        
        // Assert
        assertEquals(newId, teamMember.getId());
        assertEquals(team, teamMember.getTeam());
        assertEquals(user, teamMember.getUser());
        assertEquals(inviter, teamMember.getInvitedBy());
        assertEquals(joinedAt, teamMember.getJoinedAt());
    }
    
    @Test
    void equals_SameId_ReturnsTrue() {
        // Arrange
        TeamMember other = new TeamMember();
        other.setId(teamMember.getId());
        
        // Act & Assert
        assertEquals(teamMember, other);
    }
    
    @Test
    void equals_DifferentId_ReturnsFalse() {
        // Arrange
        TeamMember other = new TeamMember();
        other.setId(UUID.randomUUID());
        
        // Act & Assert
        assertNotEquals(teamMember, other);
    }
    
    @Test
    void equals_NullId_ReturnsFalse() {
        // Arrange
        TeamMember memberWithNullId = new TeamMember();
        TeamMember otherWithNullId = new TeamMember();
        
        // Act & Assert
        assertNotEquals(memberWithNullId, otherWithNullId);
    }
    
    @Test
    void equals_SameObject_ReturnsTrue() {
        // Act & Assert
        assertEquals(teamMember, teamMember);
    }
    
    @Test
    void equals_Null_ReturnsFalse() {
        // Act & Assert
        assertNotEquals(teamMember, null);
    }
    
    @Test
    void equals_DifferentClass_ReturnsFalse() {
        // Act & Assert
        assertNotEquals(teamMember, "not a team member");
    }
    
    @Test
    void hashCode_ConsistentWithEquals() {
        // Arrange
        TeamMember other = new TeamMember();
        other.setId(teamMember.getId());
        
        // Act & Assert
        assertEquals(teamMember.hashCode(), other.hashCode());
    }
    
    @Test
    void toString_ContainsExpectedFields() {
        // Act
        String result = teamMember.toString();
        
        // Assert
        assertTrue(result.contains("TeamMember"));
        assertTrue(result.contains(teamMember.getId().toString()));
        assertTrue(result.contains("joinedAt"));
    }
    
    @Test
    void invitedBy_CanBeNull() {
        // Act
        teamMember.setInvitedBy(null);
        
        // Assert
        assertNull(teamMember.getInvitedBy());
        // Should not throw any exceptions
        assertDoesNotThrow(() -> teamMember.toString());
    }
}