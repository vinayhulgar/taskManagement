# Kubernetes-specific configuration
spring:
  # Kubernetes database configuration with service discovery
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres-service}:${DB_PORT:5432}/${DB_NAME:taskmanagement}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:30}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: 30000
      validation-timeout: 5000
      leak-detection-threshold: 60000
  
  # Kubernetes Redis configuration
  data:
    redis:
      host: ${REDIS_HOST:redis-service}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD}
      ssl: ${REDIS_SSL:false}
      timeout: 3000ms

# Kubernetes server configuration
server:
  port: 8080
  address: 0.0.0.0
  shutdown: graceful
  tomcat:
    threads:
      max: ${SERVER_MAX_THREADS:100}
      min-spare: ${SERVER_MIN_THREADS:10}

# Kubernetes management configuration for health checks
management:
  server:
    port: 8081
    address: 0.0.0.0
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      probes:
        enabled: true
      show-details: when-authorized
      cache:
        time-to-live: 10s
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    kubernetes:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:kubernetes}
      pod: ${HOSTNAME:unknown}
      namespace: ${NAMESPACE:default}

# Kubernetes logging with structured format for log aggregation
logging:
  level:
    com.taskmanagement: ${LOG_LEVEL_APP:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:WARN}
  pattern:
    console: '{"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%level","thread":"%thread","logger":"%logger{36}","message":"%replace(%msg){"\"","\\\""}","pod":"${HOSTNAME:unknown}","namespace":"${NAMESPACE:default}","application":"${spring.application.name}"}%n'

# Kubernetes-specific CORS configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "Authorization,Content-Type,X-Requested-With"
  allow-credentials: true

# Kubernetes security configuration
security:
  jwt:
    secret-key: ${JWT_SECRET_KEY}
    expiration: ${JWT_EXPIRATION:900000}
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# Kubernetes rate limiting
rate-limit:
  requests-per-minute: ${RATE_LIMIT_RPM:100}
  enabled: ${RATE_LIMIT_ENABLED:true}

# Kubernetes application info
info:
  app:
    name: ${spring.application.name}
    description: "Task Management API - Kubernetes Environment"
    version: "@project.version@"
    environment: kubernetes
  kubernetes:
    namespace: ${NAMESPACE:default}
    pod: ${HOSTNAME:unknown}
    node: ${NODE_NAME:unknown}