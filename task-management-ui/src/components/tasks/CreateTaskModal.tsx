import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Modal } from '../ui/Modal';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Select } from '../ui/Select';
import { Textarea } from '../ui/Textarea';
import { TaskStatus, Priority, Task, User, Project } from '../../types';
import { useTasksStore } from '../../stores/tasks-store';
import { 
  CalendarIcon, 
  ClockIcon, 
  UserIcon,
  TagIcon,
  XMarkIcon,
} from '../icons';

const taskSchema = z.object({
  title: z.string().min(1, 'Title is required').max(200, 'Title must be less than 200 characters'),
  description: z.string().optional(),
  priority: z.nativeEnum(Priority),
  status: z.nativeEnum(TaskStatus).optional(),
  assigneeId: z.string().optional(),
  projectId: z.string().min(1, 'Project is required'),
  parentTaskId: z.string().optional(),
  dueDate: z.string().optional(),
  estimatedHours: z.number().min(0).max(1000).optional(),
  tags: z.array(z.string()).optional(),
});

type TaskFormData = z.infer<typeof taskSchema>;

interface CreateTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  initialStatus?: TaskStatus;
  parentTask?: Task;
  projectId?: string;
  projects?: Project[];
  users?: User[];
}

const PRIORITY_OPTIONS = [
  { value: Priority.LOW, label: 'Low Priority' },
  { value: Priority.MEDIUM, label: 'Medium Priority' },
  { value: Priority.HIGH, label: 'High Priority' },
  { value: Priority.URGENT, label: 'Urgent' },
];

const STATUS_OPTIONS = [
  { value: TaskStatus.TODO, label: 'To Do' },
  { value: TaskStatus.IN_PROGRESS, label: 'In Progress' },
  { value: TaskStatus.IN_REVIEW, label: 'In Review' },
  { value: TaskStatus.DONE, label: 'Done' },
];

const CreateTaskModal: React.FC<CreateTaskModalProps> = ({
  isOpen,
  onClose,
  initialStatus = TaskStatus.TODO,
  parentTask,
  projectId,
  projects = [],
  users = [],
}) => {
  const { addTask } = useTasksStore();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [tagInput, setTagInput] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
    reset,
  } = useForm<TaskFormData>({
    resolver: zodResolver(taskSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: initialStatus,
      projectId: projectId || '',
      parentTaskId: parentTask?.id,
      tags: [],
    },
  });

  const watchedTags = watch('tags') || [];

  const handleClose = () => {
    reset();
    setTagInput('');
    onClose();
  };

  const onSubmit = async (data: TaskFormData) => {
    setIsSubmitting(true);
    try {
      // Create new task object
      const newTask: Task = {
        id: `task-${Date.now()}`, // In real app, this would be generated by the API
        title: data.title,
        description: data.description,
        status: data.status || initialStatus,
        priority: data.priority,
        projectId: data.projectId,
        assigneeId: data.assigneeId,
        createdById: 'current-user-id', // In real app, get from auth context
        parentTaskId: data.parentTaskId,
        tags: data.tags,
        estimatedHours: data.estimatedHours,
        dueDate: data.dueDate,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      // Add assignee details if selected
      if (data.assigneeId) {
        const assignee = users.find(user => user.id === data.assigneeId);
        if (assignee) {
          newTask.assignee = assignee;
        }
      }

      // Add project details if available
      const project = projects.find(p => p.id === data.projectId);
      if (project) {
        newTask.project = project;
      }

      addTask(newTask);
      handleClose();
    } catch (error) {
      console.error('Failed to create task:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAddTag = () => {
    if (tagInput.trim() && !watchedTags.includes(tagInput.trim())) {
      const newTags = [...watchedTags, tagInput.trim()];
      setValue('tags', newTags);
      setTagInput('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    const newTags = watchedTags.filter(tag => tag !== tagToRemove);
    setValue('tags', newTags);
  };

  const handleTagInputKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };

  return (
    <Modal open={isOpen} onClose={handleClose} title="Create New Task">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Title */}
        <Input
          label="Task Title"
          required
          error={errors.title?.message}
          {...register('title')}
          placeholder="Enter task title..."
        />

        {/* Description */}
        <Textarea
          label="Description"
          rows={3}
          placeholder="Describe the task..."
          error={errors.description?.message}
          {...register('description')}
        />

        {/* Project Selection */}
        <Select
          label="Project"
          required
          error={errors.projectId?.message}
          options={projects.map(project => ({
            value: project.id,
            label: project.name,
          }))}
          value={watch('projectId')}
          onChange={(value) => setValue('projectId', value as string)}
          placeholder="Select a project..."
        />

        {/* Priority and Status */}
        <div className="grid grid-cols-2 gap-4">
          <Select
            label="Priority"
            required
            options={PRIORITY_OPTIONS}
            value={watch('priority')}
            onChange={(value) => setValue('priority', value as Priority)}
          />
          
          <Select
            label="Status"
            options={STATUS_OPTIONS}
            value={watch('status')}
            onChange={(value) => setValue('status', value as TaskStatus)}
          />
        </div>

        {/* Assignee */}
        <div className="space-y-2">
          <label className="text-sm font-medium text-gray-700 flex items-center">
            <UserIcon className="h-4 w-4 mr-1" />
            Assignee
          </label>
          <Select
            options={[
              { value: '', label: 'Unassigned' },
              ...users.map(user => ({
                value: user.id,
                label: `${user.firstName} ${user.lastName}`,
              }))
            ]}
            value={watch('assigneeId') || ''}
            onChange={(value) => setValue('assigneeId', value as string || undefined)}
            placeholder="Select assignee..."
          />
        </div>

        {/* Due Date and Estimated Hours */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700 flex items-center">
              <CalendarIcon className="h-4 w-4 mr-1" />
              Due Date
            </label>
            <Input
              type="date"
              {...register('dueDate')}
            />
          </div>
          
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700 flex items-center">
              <ClockIcon className="h-4 w-4 mr-1" />
              Estimated Hours
            </label>
            <Input
              type="number"
              min="0"
              max="1000"
              step="0.5"
              placeholder="0"
              {...register('estimatedHours', { valueAsNumber: true })}
            />
          </div>
        </div>

        {/* Parent Task (if creating subtask) */}
        {parentTask && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <p className="text-sm text-blue-800">
              <strong>Creating subtask for:</strong> {parentTask.title}
            </p>
          </div>
        )}

        {/* Tags */}
        <div className="space-y-2">
          <label className="text-sm font-medium text-gray-700 flex items-center">
            <TagIcon className="h-4 w-4 mr-1" />
            Tags
          </label>
          
          {/* Tag Input */}
          <div className="flex space-x-2">
            <Input
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyPress={handleTagInputKeyPress}
              placeholder="Add a tag..."
              className="flex-1"
            />
            <Button
              type="button"
              variant="outline"
              onClick={handleAddTag}
              disabled={!tagInput.trim()}
            >
              Add
            </Button>
          </div>
          
          {/* Tag List */}
          {watchedTags.length > 0 && (
            <div className="flex flex-wrap gap-2 mt-2">
              {watchedTags.map((tag, index) => (
                <span
                  key={index}
                  className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800"
                >
                  {tag}
                  <button
                    type="button"
                    onClick={() => handleRemoveTag(tag)}
                    className="ml-1 hover:text-blue-600"
                  >
                    <XMarkIcon className="h-3 w-3" />
                  </button>
                </span>
              ))}
            </div>
          )}
        </div>

        {/* Form Actions */}
        <div className="flex justify-end space-x-3 pt-4 border-t">
          <Button
            type="button"
            variant="outline"
            onClick={handleClose}
            disabled={isSubmitting}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            loading={isSubmitting}
            disabled={isSubmitting}
          >
            Create Task
          </Button>
        </div>
      </form>
    </Modal>
  );
};

export default CreateTaskModal;